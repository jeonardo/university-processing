// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityProcessing.Infrastructure;

#nullable disable

namespace UniversityProcessing.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("TeacherCommittee", b =>
                {
                    b.Property<Guid>("teacher_id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("teacher_id");

                    b.Property<Guid>("committee_id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("committee_id");

                    b.HasKey("teacher_id", "committee_id")
                        .HasName("pk_teacher_committees");

                    b.HasIndex("committee_id")
                        .HasDatabaseName("ix_teacher_committees_committee_id");

                    b.ToTable("teacher_committees", (string)null);
                });

            modelBuilder.Entity("TeacherDiplomaProcess", b =>
                {
                    b.Property<Guid>("teacher_id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("teacher_id");

                    b.Property<Guid>("diploma_process_id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diploma_process_id");

                    b.HasKey("teacher_id", "diploma_process_id")
                        .HasName("pk_teacher_diploma_processes");

                    b.HasIndex("diploma_process_id")
                        .HasDatabaseName("ix_teacher_diploma_processes_diploma_process_id");

                    b.ToTable("teacher_diploma_processes", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Committee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DiplomaProcessId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diploma_process_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<Guid?>("SecretaryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("secretary_id");

                    b.HasKey("Id")
                        .HasName("pk_committees");

                    b.HasIndex("DiplomaProcessId")
                        .HasDatabaseName("ix_committees_diploma_process_id");

                    b.ToTable("committees", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.DefenseSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("committee_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("DiplomaProcessId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diploma_process_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_defense_sessions");

                    b.HasIndex("CommitteeId")
                        .HasDatabaseName("ix_defense_sessions_committee_id");

                    b.HasIndex("DiplomaProcessId")
                        .HasDatabaseName("ix_defense_sessions_diploma_process_id");

                    b.ToTable("defense_sessions", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("faculty_id");

                    b.Property<Guid?>("HeadUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("head_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_departments_faculty_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Diploma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("Grade")
                        .HasColumnType("int")
                        .HasColumnName("grade");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("supervisor_id");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_diplomas");

                    b.HasIndex("SupervisorId")
                        .HasDatabaseName("ix_diplomas_supervisor_id");

                    b.ToTable("diplomas", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.DiplomaProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("period_id");

                    b.Property<DateTime?>("PossibleFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("possible_from");

                    b.Property<DateTime?>("PossibleTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("possible_to");

                    b.HasKey("Id")
                        .HasName("pk_diploma_processes");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_diploma_processes_department_id");

                    b.HasIndex("PeriodId")
                        .HasDatabaseName("ix_diploma_processes_period_id");

                    b.ToTable("diploma_processes", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("HeadUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("head_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_faculties");

                    b.ToTable("faculties", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CommitteeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("committee_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DiplomaProcessId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diploma_process_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("number");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("period_id");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("specialty_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("CommitteeId")
                        .HasDatabaseName("ix_groups_committee_id");

                    b.HasIndex("DiplomaProcessId")
                        .HasDatabaseName("ix_groups_diploma_process_id");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("ix_groups_number");

                    b.HasIndex("PeriodId")
                        .HasDatabaseName("ix_groups_period_id");

                    b.HasIndex("SpecialtyId")
                        .HasDatabaseName("ix_groups_specialty_id");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2")
                        .HasColumnName("from");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("pk_periods");

                    b.ToTable("periods", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.ProjectTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("actor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("DiplomaProcessId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diploma_process_id");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("teacher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_project_titles");

                    b.HasIndex("DiplomaProcessId")
                        .HasDatabaseName("ix_project_titles_diploma_process_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_project_titles_teacher_id");

                    b.ToTable("project_titles", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_specialties");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_specialties_code");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_specialties_department_id");

                    b.ToTable("specialties", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.UniversityPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_university_positions");

                    b.ToTable("university_positions", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit")
                        .HasColumnName("approved");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit")
                        .HasColumnName("blocked");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("full_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("FullName")
                        .HasDatabaseName("ix_users_full_name");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[normalized_user_name] IS NOT NULL");

                    b.ToTable("users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultPermissions")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("default_permissions");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[normalized_name] IS NOT NULL");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Admin", b =>
                {
                    b.HasBaseType("UniversityProcessing.Domain.Users.User");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Deanery", b =>
                {
                    b.HasBaseType("UniversityProcessing.Domain.Users.User");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("faculty_id");

                    b.Property<Guid>("UniversityPositionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("university_position_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_deaneries_faculty_id");

                    b.HasIndex("UniversityPositionId")
                        .HasDatabaseName("ix_deaneries_university_position_id");

                    b.ToTable("deaneries", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Student", b =>
                {
                    b.HasBaseType("UniversityProcessing.Domain.Users.User");

                    b.Property<Guid?>("DefenseSessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("defense_session_id");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("DiplomaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diploma_id");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("faculty_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("group_id");

                    b.HasIndex("DefenseSessionId")
                        .HasDatabaseName("ix_students_defense_session_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_students_department_id");

                    b.HasIndex("DiplomaId")
                        .IsUnique()
                        .HasDatabaseName("ix_students_diploma_id")
                        .HasFilter("[diploma_id] IS NOT NULL");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_students_faculty_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_students_group_id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Teacher", b =>
                {
                    b.HasBaseType("UniversityProcessing.Domain.Users.User");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("faculty_id");

                    b.Property<Guid>("UniversityPositionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("university_position_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_teachers_department_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_teachers_faculty_id");

                    b.HasIndex("UniversityPositionId")
                        .HasDatabaseName("ix_teachers_university_position_id");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("TeacherCommittee", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Committee", null)
                        .WithMany()
                        .HasForeignKey("committee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_committees_committees_committee_id");

                    b.HasOne("UniversityProcessing.Domain.Users.Teacher", null)
                        .WithMany()
                        .HasForeignKey("teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_committees_teachers_teacher_id");
                });

            modelBuilder.Entity("TeacherDiplomaProcess", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.DiplomaProcess", null)
                        .WithMany()
                        .HasForeignKey("diploma_process_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_diploma_processes_diploma_processes_diploma_process_id");

                    b.HasOne("UniversityProcessing.Domain.Users.Teacher", null)
                        .WithMany()
                        .HasForeignKey("teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_diploma_processes_teachers_teacher_id");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Committee", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.DiplomaProcess", "DiplomaProcess")
                        .WithMany("Committees")
                        .HasForeignKey("DiplomaProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_committees_diploma_processes_diploma_process_id");

                    b.Navigation("DiplomaProcess");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.DefenseSession", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_defense_sessions_committees_committee_id");

                    b.HasOne("UniversityProcessing.Domain.DiplomaProcess", "DiplomaProcess")
                        .WithMany("DefenseSessions")
                        .HasForeignKey("DiplomaProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_defense_sessions_diploma_processes_diploma_process_id");

                    b.Navigation("Committee");

                    b.Navigation("DiplomaProcess");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Department", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_faculties_faculty_id");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Diploma", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Users.Teacher", "Supervisor")
                        .WithMany("Diplomas")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_diplomas_teachers_supervisor_id");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.DiplomaProcess", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Department", null)
                        .WithMany("DiplomaProcesses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_diploma_processes_departments_department_id");

                    b.HasOne("UniversityProcessing.Domain.Period", "Period")
                        .WithMany("DiplomaProcesses")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_diploma_processes_periods_period_id");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Group", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Committee", null)
                        .WithMany("Groups")
                        .HasForeignKey("CommitteeId")
                        .HasConstraintName("fk_groups_committees_committee_id");

                    b.HasOne("UniversityProcessing.Domain.DiplomaProcess", "DiplomaProcess")
                        .WithMany("Groups")
                        .HasForeignKey("DiplomaProcessId")
                        .HasConstraintName("fk_groups_diploma_processes_diploma_process_id");

                    b.HasOne("UniversityProcessing.Domain.Period", "Period")
                        .WithMany("Groups")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_periods_period_id");

                    b.HasOne("UniversityProcessing.Domain.Specialty", "Specialty")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_specialties_specialty_id");

                    b.Navigation("DiplomaProcess");

                    b.Navigation("Period");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.ProjectTitle", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.DiplomaProcess", null)
                        .WithMany("RequiredProjectTitles")
                        .HasForeignKey("DiplomaProcessId")
                        .HasConstraintName("fk_project_titles_diploma_processes_diploma_process_id");

                    b.HasOne("UniversityProcessing.Domain.Users.Teacher", null)
                        .WithMany("ProjectTitles")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_project_titles_teachers_teacher_id");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Specialty", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Department", "Department")
                        .WithMany("Specialties")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialties_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Admin", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("UniversityProcessing.Domain.Users.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_admins_users_id");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Deanery", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Faculty", "Faculty")
                        .WithMany("Deaneries")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deaneries_faculties_faculty_id");

                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("UniversityProcessing.Domain.Users.Deanery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deaneries_users_id");

                    b.HasOne("UniversityProcessing.Domain.UniversityPosition", "UniversityPosition")
                        .WithMany("Deaneries")
                        .HasForeignKey("UniversityPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deaneries_university_positions_university_position_id");

                    b.Navigation("Faculty");

                    b.Navigation("UniversityPosition");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Student", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.DefenseSession", "DefenseSession")
                        .WithMany("Students")
                        .HasForeignKey("DefenseSessionId")
                        .HasConstraintName("fk_students_defense_sessions_defense_session_id");

                    b.HasOne("UniversityProcessing.Domain.Department", null)
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_students_departments_department_id");

                    b.HasOne("UniversityProcessing.Domain.Diploma", "Diploma")
                        .WithOne("Student")
                        .HasForeignKey("UniversityProcessing.Domain.Users.Student", "DiplomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_students_diplomas_diploma_id");

                    b.HasOne("UniversityProcessing.Domain.Faculty", null)
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("fk_students_faculties_faculty_id");

                    b.HasOne("UniversityProcessing.Domain.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_groups_group_id");

                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("UniversityProcessing.Domain.Users.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_users_id");

                    b.Navigation("DefenseSession");

                    b.Navigation("Diploma");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Teacher", b =>
                {
                    b.HasOne("UniversityProcessing.Domain.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_departments_department_id");

                    b.HasOne("UniversityProcessing.Domain.Faculty", null)
                        .WithMany("Teachers")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("fk_teachers_faculties_faculty_id");

                    b.HasOne("UniversityProcessing.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("UniversityProcessing.Domain.Users.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_users_id");

                    b.HasOne("UniversityProcessing.Domain.UniversityPosition", "UniversityPosition")
                        .WithMany("Teachers")
                        .HasForeignKey("UniversityPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_university_positions_university_position_id");

                    b.Navigation("Department");

                    b.Navigation("UniversityPosition");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Committee", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.DefenseSession", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Department", b =>
                {
                    b.Navigation("DiplomaProcesses");

                    b.Navigation("Specialties");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Diploma", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityProcessing.Domain.DiplomaProcess", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("DefenseSessions");

                    b.Navigation("Groups");

                    b.Navigation("RequiredProjectTitles");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Faculty", b =>
                {
                    b.Navigation("Deaneries");

                    b.Navigation("Departments");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Period", b =>
                {
                    b.Navigation("DiplomaProcesses");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Specialty", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.UniversityPosition", b =>
                {
                    b.Navigation("Deaneries");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("UniversityProcessing.Domain.Users.Teacher", b =>
                {
                    b.Navigation("Diplomas");

                    b.Navigation("ProjectTitles");
                });
#pragma warning restore 612, 618
        }
    }
}
