// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniversityProcessing.API.Infrastructure;

#nullable disable

namespace UniversityProcessing.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231210225006_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", "public");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("short_name");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uuid")
                        .HasColumnName("supervisor_id");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_departments_faculty_id");

                    b.HasIndex("SupervisorId")
                        .HasDatabaseName("ix_departments_supervisor_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_departments_university_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.DiplomaProcessingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string[]>("RequiredTitles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("required_titles");

                    b.Property<Guid>("SecretaryId")
                        .HasColumnType("uuid")
                        .HasColumnName("secretary_id");

                    b.HasKey("Id")
                        .HasName("pk_diploma_processings");

                    b.ToTable("diploma_processings", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("short_name");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("Id")
                        .HasName("pk_faculties");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_faculties_university_id");

                    b.ToTable("faculties", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.GraduateWorkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DiplomaProcessingEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("diploma_processing_entity_id");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<Guid>("SupervisorId")
                        .HasColumnType("uuid")
                        .HasColumnName("supervisor_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_graduate_works");

                    b.HasIndex("DiplomaProcessingEntityId")
                        .HasDatabaseName("ix_graduate_works_diploma_processing_entity_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_graduate_works_status_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_graduate_works_student_id");

                    b.HasIndex("SupervisorId")
                        .HasDatabaseName("ix_graduate_works_supervisor_id");

                    b.ToTable("graduate_works", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.SpecialtyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("short_name");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("Id")
                        .HasName("pk_specialties");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_specialties_department_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_specialties_faculty_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_specialties_university_id");

                    b.ToTable("specialties", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.StatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.StudyGroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_id");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_number");

                    b.Property<Guid?>("SpecialtyEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialty_entity_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("StudentEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_entity_id");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.HasKey("Id")
                        .HasName("pk_study_groups");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_study_groups_department_id");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_study_groups_faculty_id");

                    b.HasIndex("SpecialtyEntityId")
                        .HasDatabaseName("ix_study_groups_specialty_entity_id");

                    b.HasIndex("StudentEntityId")
                        .HasDatabaseName("ix_study_groups_student_entity_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_study_groups_university_id");

                    b.ToTable("study_groups", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_universities");

                    b.ToTable("universities", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<Guid?>("StudyGroupEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("study_group_entity_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StudyGroupEntityId")
                        .HasDatabaseName("ix_users_study_group_entity_id");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_users_user_profile_id");

                    b.ToTable("users", "public");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.UserProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("father_name");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", "public");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.EmployeeEntity", b =>
                {
                    b.HasBaseType("UniversityProcessing.API.Infrastructure.Entities.UserEntity");

                    b.Property<Guid?>("DepartmentEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("department_entity_id");

                    b.Property<Guid?>("DiplomaProcessingEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("diploma_processing_entity_id");

                    b.Property<Guid?>("FacultyEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_entity_id");

                    b.Property<Guid?>("UniversityEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("university_entity_id");

                    b.HasIndex("DepartmentEntityId")
                        .HasDatabaseName("ix_users_department_entity_id");

                    b.HasIndex("DiplomaProcessingEntityId")
                        .HasDatabaseName("ix_users_diploma_processing_entity_id");

                    b.HasIndex("FacultyEntityId")
                        .HasDatabaseName("ix_users_faculty_entity_id");

                    b.HasIndex("UniversityEntityId")
                        .HasDatabaseName("ix_users_university_entity_id");

                    b.HasDiscriminator().HasValue("EmployeeEntity");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.StudentEntity", b =>
                {
                    b.HasBaseType("UniversityProcessing.API.Infrastructure.Entities.UserEntity");

                    b.Property<Guid?>("DepartmentEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("department_entity_id");

                    b.Property<Guid?>("DiplomaProcessingEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("diploma_processing_entity_id");

                    b.Property<Guid?>("FacultyEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_entity_id");

                    b.Property<Guid?>("SpecialtyEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialty_entity_id");

                    b.Property<Guid?>("UniversityEntityId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uuid")
                        .HasColumnName("university_entity_id");

                    b.HasIndex("DepartmentEntityId")
                        .HasDatabaseName("ix_users_department_entity_id");

                    b.HasIndex("DiplomaProcessingEntityId")
                        .HasDatabaseName("ix_users_diploma_processing_entity_id");

                    b.HasIndex("FacultyEntityId")
                        .HasDatabaseName("ix_users_faculty_entity_id");

                    b.HasIndex("SpecialtyEntityId")
                        .HasDatabaseName("ix_users_specialty_entity_id");

                    b.HasIndex("UniversityEntityId")
                        .HasDatabaseName("ix_users_university_entity_id");

                    b.HasDiscriminator().HasValue("StudentEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UserRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UserRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_faculties_faculty_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.EmployeeEntity", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_users_supervisor_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", "University")
                        .WithMany("Departments")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departments_universities_university_id");

                    b.Navigation("Faculty");

                    b.Navigation("Supervisor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_faculties_universities_university_id");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.GraduateWorkEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.DiplomaProcessingEntity", null)
                        .WithMany("GraduateWorks")
                        .HasForeignKey("DiplomaProcessingEntityId")
                        .HasConstraintName("fk_graduate_works_diploma_processings_diploma_processing_entit");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.StatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graduate_works_statuses_status_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.StudentEntity", "Student")
                        .WithMany("GraduateWorks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graduate_works_users_student_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.EmployeeEntity", "Supervisor")
                        .WithMany("GraduateWorks")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_graduate_works_users_supervisor_id");

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.SpecialtyEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.DepartmentEntity", "Department")
                        .WithMany("Specialties")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialties_departments_department_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", "Faculty")
                        .WithMany("Specialties")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialties_faculties_faculty_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", "University")
                        .WithMany("Specialties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialties_universities_university_id");

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.StudyGroupEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.DepartmentEntity", "Department")
                        .WithMany("StudyGroups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_study_groups_departments_department_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", "Faculty")
                        .WithMany("StudyGroups")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_study_groups_faculties_faculty_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.SpecialtyEntity", null)
                        .WithMany("StudyGroups")
                        .HasForeignKey("SpecialtyEntityId")
                        .HasConstraintName("fk_study_groups_specialties_specialty_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.StudentEntity", null)
                        .WithMany("StudyGroups")
                        .HasForeignKey("StudentEntityId")
                        .HasConstraintName("fk_study_groups_users_student_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", "University")
                        .WithMany("StudyGroups")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_study_groups_universities_university_id");

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("University");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.UserEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.StudyGroupEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("StudyGroupEntityId")
                        .HasConstraintName("fk_users_study_groups_study_group_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UserProfileEntity", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_user_profiles_user_profile_id");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.DepartmentEntity", null)
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentEntityId")
                        .HasConstraintName("fk_employee_entity_departments_department_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.DiplomaProcessingEntity", null)
                        .WithMany("Employees")
                        .HasForeignKey("DiplomaProcessingEntityId")
                        .HasConstraintName("fk_employee_entity_diploma_processings_diploma_processing_entit");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", null)
                        .WithMany("Employees")
                        .HasForeignKey("FacultyEntityId")
                        .HasConstraintName("fk_users_faculties_faculty_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", null)
                        .WithMany("Employees")
                        .HasForeignKey("UniversityEntityId")
                        .HasConstraintName("fk_users_universities_university_entity_id");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.StudentEntity", b =>
                {
                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.DepartmentEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("DepartmentEntityId")
                        .HasConstraintName("fk_student_entity_departments_department_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.DiplomaProcessingEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("DiplomaProcessingEntityId")
                        .HasConstraintName("fk_student_entity_diploma_processings_diploma_processing_entity");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("FacultyEntityId")
                        .HasConstraintName("fk_users_faculties_faculty_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.SpecialtyEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("SpecialtyEntityId")
                        .HasConstraintName("fk_users_specialties_specialty_entity_id");

                    b.HasOne("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", null)
                        .WithMany("Students")
                        .HasForeignKey("UniversityEntityId")
                        .HasConstraintName("fk_users_universities_university_entity_id");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Specialties");

                    b.Navigation("Students");

                    b.Navigation("StudyGroups");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.DiplomaProcessingEntity", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("GraduateWorks");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.FacultyEntity", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Specialties");

                    b.Navigation("Students");

                    b.Navigation("StudyGroups");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.SpecialtyEntity", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("StudyGroups");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.StudyGroupEntity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.UniversityEntity", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Faculties");

                    b.Navigation("Specialties");

                    b.Navigation("Students");

                    b.Navigation("StudyGroups");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("GraduateWorks");
                });

            modelBuilder.Entity("UniversityProcessing.API.Infrastructure.Entities.StudentEntity", b =>
                {
                    b.Navigation("GraduateWorks");

                    b.Navigation("StudyGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
